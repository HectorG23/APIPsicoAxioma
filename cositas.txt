"test": "mocha",
    "start": "node index.js"

    import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import mysql from 'mysql2/promise';

// Definir __dirname en un entorno de módulos ES
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default class ResultsController {
  static async resultDiary(req, res) {
    let connection;
    try {
      const { userEmail } = req.query; // Obtener el email de los parámetros de la consulta
      connection = await mysql.createConnection(db);
      const [result] = await connection.execute(
        `SELECT resultdiary.resultDiary, resultdiary.diaryFK, diary.diaryDate
          FROM user 
          INNER JOIN diary ON user.userID = diary.userFK
          INNER JOIN resultdiary ON diary.diaryID = resultdiary.diaryFK
          WHERE user.userEmail = ?
          ORDER BY resultdiary.diaryFK DESC
          LIMIT 7`, [userEmail] // Pasar los parámetros como un array
      );

      // Crear un archivo con los datos del usuario
      const userFilePath = path.join(__dirname, `result_${userEmail}_data.json`);
      const userFileContent = JSON.stringify(result, null, 2);

      fs.writeFileSync(userFilePath, userFileContent);

      // Enviar el archivo al cliente
      res.download(userFilePath, `result_${userEmail}_data.json`, (err) => {
        if (err) {
          return res.status(500).send("Error downloading the file");
        }

        // Eliminar el archivo temporal después de la descarga
        fs.unlinkSync(userFilePath);
      });
    } catch (error) {
      res.status(500).json({ error: error.message });
    } finally {
      if (connection) {
        await connection.end();
      }
    }
  }
}

static async deleteUser(req, res) {
    let connection;
    try {
        connection = await mysql.createConnection({
            ...db,
            multipleStatements: true,
        });
        const { userEmail } = req.query;

        // Obtener el userID basado en el userEmail
        const [userResult] = await connection.execute(
            `SELECT userID FROM user WHERE userEmail = ?`,
            [userEmail]
        );

        if (userResult.length === 0) {
            return res.status(404).send("User not found");
        }

        const userID = userResult[0].userID;

        // Obtener todos los datos del usuario
        const [userData] = await connection.execute(
            `SELECT * FROM user WHERE userID = ?`,
            [userID]
        );

        const [diaryData] = await connection.execute(
            `SELECT * FROM diary WHERE userFK = ?`,
            [userID]
        );

        const [resultDiaryData] = await connection.execute(
            `SELECT * FROM resultdiary WHERE diaryFK IN (SELECT diaryID FROM diary WHERE userFK = ?)`,
            [userID]
        );

        // Crear un archivo con los datos del usuario
        const userFilePath = path.join(__dirname, `user_${userID}_data.json`);
        const userFileContent = JSON.stringify({
            user: userData,
            diary: diaryData,
            resultDiary: resultDiaryData
        }, null, 2);

        fs.writeFileSync(userFilePath, userFileContent);

        // Enviar el archivo al cliente
        res.download(userFilePath, `user_${userID}_data.json`, async (err) => {
            if (err) {
                return res.status(500).send("Error downloading the file");
            }

            // Deshabilitar actualizaciones seguras
            await connection.execute(`SET SQL_SAFE_UPDATES = 0`);

            // Eliminar de resultdiary
            await connection.execute(
                `DELETE FROM resultdiary WHERE diaryFK IN (SELECT diaryID FROM diary WHERE userFK = ?)`,
                [userID]
            );

            // Eliminar de diary
            await connection.execute(`DELETE FROM diary WHERE userFK = ?`, [userID]);

            // Eliminar de user
            await connection.execute(`DELETE FROM user WHERE userID = ?`, [userID]);

            // Habilitar actualizaciones seguras
            await connection.execute(`SET SQL_SAFE_UPDATES = 1`);

            // Eliminar el archivo temporal
            fs.unlinkSync(userFilePath);

            res.status(200).send("Deleted successfully");
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}
}
